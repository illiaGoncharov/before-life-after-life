{"version":3,"file":"static/js/98.df5c7c82.chunk.js","mappings":"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","sources":["components/Typewriter/index.jsx","components/Form/Form.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nconst Typewriter = ({ text = \"\", delayBeforeStart = 0, charInterval = 50, onComplete, instant = false }) => {\n  const [displayedText, setDisplayedText] = useState(\"\");\n  const startTimeout = useRef(null);\n  const intervalRef = useRef(null);\n\n  useEffect(() => {\n    // Сбрасываем отображаемый текст при его изменении\n    setDisplayedText(\"\");\n\n    // Если включен мгновенный режим или нужно показать весь текст сразу\n    if (instant) {\n      setDisplayedText(text);\n      if (onComplete) onComplete();\n      return;\n    }\n\n    // Выполняем анимацию печатной машинки\n    startTimeout.current = setTimeout(() => {\n      let idx = 0;\n      intervalRef.current = setInterval(() => {\n        setDisplayedText((prev) => prev + text[idx]);\n        idx++;\n        if (idx >= text.length) {\n          clearInterval(intervalRef.current);\n          if (onComplete) onComplete();\n        }\n      }, charInterval);\n    }, delayBeforeStart);\n\n    return () => {\n      clearTimeout(startTimeout.current);\n      clearInterval(intervalRef.current);\n    };\n  }, [text, delayBeforeStart, charInterval, onComplete, instant]);\n\n  return <p>{displayedText}</p>;\n};\n\nexport default Typewriter; ","import React, { useState, useEffect } from \"react\";\nimport \"./Form.css\";\nimport Typewriter from \"../Typewriter\";\n\nconst totalPrompts = 45;\n\nfunction Form({ onNavigate, onStepChange }) {\n  const [step, setStep] = useState(1);\n  const [images, setImages] = useState(Array(totalPrompts).fill(null));\n  const [completed, setCompleted] = useState(false);\n  const [customPrompt, setCustomPrompt] = useState(\"\");\n  const [typedStep1Count, setTypedStep1Count] = useState(0);\n  const [typedStep3Count, setTypedStep3Count] = useState(0);\n  const [typedStep4Count, setTypedStep4Count] = useState(0);\n  const CHAR_INTERVAL = 50;\n  const PARAGRAPH_DELAY = 500;\n\n  const STEP1_ITEMS = [\n    { prefix: \"[0]\", text: \"On this page, you can upload your images and fill out a short form.\" },\n    { prefix: \"[0.1]\", text: \"The images you share will be used to generate a sequence of AI-created visuals, guided by the prompts listed in the [text] section. Your photographs will help shape a visual journey—from before life to afterlife.\" },\n    { prefix: \"[0.2]\", text: \"Submit personal images already captured in everyday life. The images should form a coherent set through a recurring object, shape, or motif, a visual pattern, or a consistent photographic style—the connection can be thematic or aesthetic, but it must emerge naturally across the collection. For example: meals photographed across different days, views from the same window in changing light, or street scenes showing subtle variations over time.\" },\n    { prefix: \"[0.3]\", text: \"Do not take new photos just for this project. Send images that naturally reflect how you photograph your surroundings.\" },\n  ];\n\n  const STEP3_ITEMS = [\n    { prefix: \"[2]\", text: \"Fill any information you feel comfortable sharing. Fields marked with * are required, and question 2.4 is highly encouraged.\" },\n    { prefix: \"[2.5]\", text: \"Would you like to receive $1 for participating?\" },\n    { prefix: \"[2.6]\", text: \"Do you agree to your images being used to train AI?\" },\n    { prefix: \"[2.7]\", text: \"Do you agree to your images potentially shown publicly?\" },\n  ];\n\n  const STEP4_ITEMS = [\n    { prefix: \"[✓]\", text: \"Thank you! Your contribution is priceless.\" },\n    { prefix: \"\", text: \"Your dataset will be transformed into 45 images tracing your speculative lifespan—from [before life] to [after life].\" },\n    { prefix: \"\", text: \"It may take anywhere from 1 to 365 business days to process your data. If you get impatient, don't hesitate to drop us a line at [beforelife@yahoo.com]\" },\n    { prefix: \"\", text: \"We may feature selected results on this page (and beyond). If so, we'll make sure to ask for your permission first.\" },\n    { prefix: \"\", text: \"Bisou-bisou! Talk to you soon :)\" },\n  ];\n\n  // Reset typing counters on step change; in dev show all step1 immediately for testing\n  const isDev = process.env.NODE_ENV !== 'production';\n  useEffect(() => {\n    if (step === 1) {\n      if (isDev) {\n        // immediately reveal all step 1 items in dev\n        setTypedStep1Count(STEP1_ITEMS.length);\n      } else {\n        setTypedStep1Count(0);\n      }\n    }\n    if (step === 3) setTypedStep3Count(0);\n  }, [step, isDev]);\n\n  // Notify parent about step changes\n  useEffect(() => {\n    if (onStepChange) onStepChange(step);\n  }, [step, onStepChange]);\n\n  const handleImageUpload = (event, index) => {\n    const file = event.target.files[0];\n    if (file) {\n      const newImages = [...images];\n      newImages[index] = URL.createObjectURL(file);\n      setImages(newImages);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setCompleted(true);\n    setTypedStep4Count(0);\n  };\n\n  return (\n    <div className=\"form-container\">\n      {!completed ? (\n        <>\n          {/* ТЕКСТОВЫЙ СТОЛБЕЦ */}\n          <div className={`form-text-view ${step > 1 ? \"dimmed\" : \"\"}`}>\n            <ul className=\"form-text-list\">\n              {STEP1_ITEMS.map((item, idx) => {\n                const isComplete = idx < typedStep1Count;\n                const isTyping = idx === typedStep1Count;\n                if (!isComplete && !isTyping) return null;\n                return (\n                  <li key={idx} className=\"form-text-list-element\">\n                    <span>{item.prefix}</span>\n                    {isComplete ? (\n                      <p>{item.text}</p>\n                    ) : (\n                      <Typewriter\n                        text={item.text}\n                        charInterval={CHAR_INTERVAL}\n                        onComplete={() => setTypedStep1Count((c) => c + 1)}\n                        instant={isDev}\n                      />\n                    )}\n                  </li>\n                );\n              })}\n            </ul>\n            {step === 1 && typedStep1Count >= STEP1_ITEMS.length && (\n              <button\n                className=\"form-text-next-button\"\n                onClick={() => setStep(2)}\n              >\n                [Next]\n              </button>\n            )}\n          </div>\n\n          {/* СЕТКА ДЛЯ ЗАГРУЗКИ ИЗОБРАЖЕНИЙ */}\n          {step > 1 && (\n            <div className={`form-upload-view ${step === 3 ? \"dimmed\" : \"\"}`}>\n              <div className=\"form-image-grid\">\n                {Array.from({ length: totalPrompts }, (_, i) => (\n                  <div key={i} className=\"form-grid-cell\">\n                    {images[i] ? (\n                      <img loading=\"lazy\" src={images[i]} alt={`Upload ${i + 1}`} />\n                    ) : (\n                      <label>\n                        <input\n                          type=\"file\"\n                          accept=\"image/*\"\n                          onChange={(e) => handleImageUpload(e, i)}\n                          style={{ display: \"none\" }}\n                        />\n                      </label>\n                    )}\n                  </div>\n                ))}\n              </div>\n              {step === 2 && (\n                <button\n                  className=\"form-upload-button\"\n                  onClick={() => setStep(3)}\n                  disabled={!images.some((img) => img !== null)}\n                >\n                  [Upload]\n                </button>\n              )}\n            </div>\n          )}\n\n          {/* ФОРМА ДЛЯ ИМЕНИ И ДАННЫХ */}\n          {step === 3 && (\n            <div className=\"form-data-view\">\n              <form className=\"form-data-view-form\" onSubmit={handleSubmit}>\n                <div className=\"form-data-field\">\n                  <span>[2]</span>\n                  <div className=\"form-data-field-content\">\n                    <p>Fill any information you feel comfortable sharing.</p>\n                    <p><em>Fields marked with * are required, and answering question 2.4 is encouraged.</em></p>\n                  </div>\n                </div>\n                <div className=\"form-data-field\">\n                  <span>[2.1]</span>\n                  <div className=\"form-data-field-content\">\n                    <p>YOUR NAME OR NICKNAME</p>\n                    <input type=\"text\" name=\"name\" required />\n                  </div>\n                </div>\n                <div className=\"form-data-field\">\n                  <span>[2.2]</span>\n                  <div className=\"form-data-field-content\">\n                    <p>YOUR E-MAIL</p>\n                    <em>(for very rare updates)</em>\n                    <input type=\"email\" name=\"email\" required />\n                  </div>\n                </div>\n                <div className=\"form-data-field\">\n                  <span>[2.3]</span>\n                  <div className=\"form-data-field-content\">\n                    <p>PLACE OF ORIGIN</p>\n                    <input type=\"text\" name=\"origin\" />\n                  </div>\n                </div>\n                <div className=\"form-data-field\">\n                  <span>[2.4]</span>\n                  <div className=\"form-data-field-content\">\n                    <p>YOUR OWN PROMPT</p>\n                    <em>(a phrase or sentence you'd like to see influence the generated images)</em>\n                    <input\n                      type=\"text\"\n                      placeholder=\"Suggest your own prompt\"\n                      value={customPrompt}\n                      onChange={(e) => setCustomPrompt(e.target.value)}\n                      required\n                    />\n                  </div>\n                </div>\n                <div className=\"form-data-field\">\n                  <span>[2.5]</span>\n                  <div className=\"form-data-field-content\">\n                    <p>Would you like to receive $1 for participating?</p>\n                    <em>(If so, you'll be contacted by provided e-mail)</em>\n                    <div className=\"radio-group\">\n                      <label>\n                        <input type=\"radio\" name=\"payment\" value=\"yes\" required /> [YES]\n                      </label>\n                      <label>\n                        <input type=\"radio\" name=\"payment\" value=\"no\" required /> [NO], I participate voluntarily.\n                      </label>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"form-data-field\">\n                  <span>[2.6*]</span>\n                  <div className=\"form-data-field-content\">\n                    <p>Do you agree to your images being used to train AI?</p>\n                    <div className=\"radio-group\">\n                      <label>\n                        <input type=\"radio\" name=\"train_ai\" value=\"yes\" required /> [YES]\n                      </label>\n                      <label>\n                        <input type=\"radio\" name=\"train_ai\" value=\"no\" required /> [NO]\n                      </label>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"form-data-field\">\n                  <span>[2.7*]</span>\n                  <div className=\"form-data-field-content\">\n                    <p>Do you agree to your images potentially shown publicly?</p>\n                    <div className=\"radio-group\">\n                      <label>\n                        <input type=\"radio\" name=\"publicly\" value=\"yes\" required /> [YES]\n                      </label>\n                      <label>\n                        <input type=\"radio\" name=\"publicly\" value=\"no\" required /> [NO]\n                      </label>\n                    </div>\n                  </div>\n                </div>\n                <button type=\"submit\" className=\"form-data-view-submit\">\n                  [COMPLETE]\n                </button>\n              </form>\n            </div>\n          )}\n        </>\n      ) : (\n        <div className=\"form-completed-view\">\n          <div className=\"form-completed-text\">\n            {STEP4_ITEMS.map((item, idx) => {\n              const isComplete = idx < typedStep4Count;\n              const isTyping = idx === typedStep4Count;\n              if (!isComplete && !isTyping) return null;\n              return (\n                <div key={idx} className=\"form-completed-list-element\">\n                  <span>{item.prefix}</span>\n                  {isComplete ? (\n                    <p>{item.text}</p>\n                  ) : (\n                    <Typewriter\n                      text={item.text}\n                      charInterval={CHAR_INTERVAL}\n                      onComplete={() => setTypedStep4Count((c) => c + 1)}\n                      instant={true}\n                    />\n                  )}\n                </div>\n              );\n            })}\n          </div>\n          <button\n            className=\"learn-more-button\"\n            onClick={() => onNavigate(\"text\")}\n          >\n            [learn more]\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Form;\n"],"names":["_ref","text","delayBeforeStart","charInterval","onComplete","instant","displayedText","setDisplayedText","useState","startTimeout","useRef","intervalRef","useEffect","current","setTimeout","idx","setInterval","prev","length","clearInterval","clearTimeout","_jsx","children","onNavigate","onStepChange","step","setStep","images","setImages","Array","fill","completed","setCompleted","customPrompt","setCustomPrompt","typedStep1Count","setTypedStep1Count","typedStep3Count","setTypedStep3Count","typedStep4Count","setTypedStep4Count","STEP1_ITEMS","prefix","isDev","process","className","_jsxs","map","item","isComplete","Typewriter","c","onClick","_Fragment","from","_","i","loading","src","alt","type","accept","onChange","e","handleImageUpload","event","index","file","target","files","newImages","URL","createObjectURL","style","display","disabled","some","img","onSubmit","preventDefault","name","required","placeholder","value"],"sourceRoot":""}