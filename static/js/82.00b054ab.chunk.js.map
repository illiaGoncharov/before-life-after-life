{"version":3,"file":"static/js/82.00b054ab.chunk.js","mappings":"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","sources":["components/Typewriter/Typewriter.jsx","components/Form/formSteps.js","components/Form/Form.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./Typewriter.css\";\n\n/**\n * Enhanced Typewriter component with improved animation and cursor effect\n * @param {string} text - Text to animate\n * @param {number} charInterval - Interval between characters in ms\n * @param {function} onComplete - Callback when animation completes\n * @param {boolean} isInstant - Show text instantly without animation\n */\nconst Typewriter = ({ \n  text = \"\", \n  charInterval = 15, \n  onComplete, \n  isInstant = false \n}) => {\n  const [displayedText, setDisplayedText] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const timeoutRef = useRef(null);\n  const indexRef = useRef(0);\n\n  useEffect(() => {\n    if (isInstant) {\n      setDisplayedText(text);\n      setIsTyping(false);\n      if (onComplete) onComplete();\n      return;\n    }\n\n    setIsTyping(true);\n    indexRef.current = 0;\n    setDisplayedText(\"\");\n\n    const type = () => {\n      if (indexRef.current < text.length) {\n        setDisplayedText(text.slice(0, indexRef.current + 1));\n        indexRef.current += 1;\n        timeoutRef.current = setTimeout(type, charInterval);\n      } else {\n        setIsTyping(false);\n        if (onComplete) onComplete();\n      }\n    };\n\n    timeoutRef.current = setTimeout(type, charInterval);\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n      setIsTyping(false);\n      indexRef.current = 0;\n    };\n  }, [text, charInterval, isInstant, onComplete]);\n\n  return (\n    <p className={`typewriter-text ${isTyping ? \"typing\" : \"\"}`}>\n      {displayedText}\n      {isTyping && <span className=\"typewriter-cursor\">|</span>}\n    </p>\n  );\n};\n\nexport default Typewriter; ","// Конфигурация шагов формы\n// Содержит весь текстовый контент для разных этапов формы\n\nexport const STEP1_ITEMS = [\n  { prefix: \"[0]\", text: \"On this page, you can upload your images and fill out a short form.\" },\n  { prefix: \"[0.1]\", text: \"The images you share will be used to generate a sequence of AI-created visuals, guided by the prompts listed in the [text] section. Your photographs will help shape a visual journey—from before life to afterlife.\" },\n  { prefix: \"[0.2]\", text: \"Submit personal images already captured in everyday life. The images should form a coherent set through a recurring object, shape, or motif, a visual pattern, or a consistent photographic style—the connection can be thematic or aesthetic, but it must emerge naturally across the collection. For example: meals photographed across different days, views from the same window in changing light, or street scenes showing subtle variations over time.\" },\n  { prefix: \"[0.3]\", text: \"Do not take new photos just for this project. Send images that naturally reflect how you photograph your surroundings.\" },\n];\n\nexport const STEP3_ITEMS = [\n  { prefix: \"[2]\", text: \"Fill any information you feel comfortable sharing.\" },\n  { prefix: \"\", text: \"Fields marked with * are required, and answering question 2.4 is encouraged.\", isItalic: true },\n  { prefix: \"[2.1]\", text: \"YOUR NAME OR NICKNAME\" },\n  { prefix: \"[2.2]\", text: \"YOUR E-MAIL\" },\n  { prefix: \"\", text: \"(for very rare updates)\", isItalic: true },\n  { prefix: \"[2.3]\", text: \"PLACE OF ORIGIN\" },\n  { prefix: \"[2.4]\", text: \"YOUR OWN PROMPT\" },\n  { prefix: \"\", text: \"(a phrase or sentence you'd like to see influence the generated images)\", isItalic: true },\n  { prefix: \"[2.5]\", text: \"Would you like to receive $1 for participating?\" },\n  { prefix: \"\", text: \"(If so, you'll be contacted by provided e-mail)\", isItalic: true },\n  { prefix: \"[2.6*]\", text: \"Do you agree to your images being used to train AI?\" },\n  { prefix: \"[2.7*]\", text: \"Do you agree to your images potentially shown publicly?\" }\n];\n\nexport const STEP4_ITEMS = [\n  { prefix: \"[✓]\", text: \"Thank you! Your contribution is priceless.\" },\n  { prefix: \"\", text: \"Your dataset will be transformed into 45 images tracing your speculative lifespan—from [before life] to [after life].\" },\n  { prefix: \"\", text: \"It may take anywhere from 1 to 365 business days to process your data. If you get impatient, don't hesitate to drop us a line at [beforelife@yahoo.com]\" },\n  { prefix: \"\", text: \"We may feature selected results on this page (and beyond). If so, we'll make sure to ask for your permission first.\" },\n  { prefix: \"\", text: \"Bisou-bisou! Talk to you soon :)\" },\n]; ","import React, { useState, useEffect } from \"react\";\nimport \"./Form.css\";\nimport Typewriter from \"../Typewriter/Typewriter\";\nimport { STEP1_ITEMS, STEP3_ITEMS, STEP4_ITEMS } from \"./formSteps\";\n\n/**\n * Основной компонент формы для проекта Before Life After Life\n * Обрабатывает многоступенчатый процесс заполнения формы, включая:\n * - Анимацию текста с эффектом печатной машинки\n * - Интерфейс загрузки изображений\n * - Сбор пользовательских данных\n */\n\nconst totalPrompts = 45;\n\nfunction Form({ onNavigate, onStepChange }) {\n  // Основное управление состоянием\n  const [step, setStep] = useState(1);\n  const [images, setImages] = useState(Array(totalPrompts).fill(null));\n  const [completed, setCompleted] = useState(false);\n  const [customPrompt, setCustomPrompt] = useState(\"\");\n  \n  // Состояния для управления анимацией печатной машинки\n  const [typedStep1Count, setTypedStep1Count] = useState(0);\n  const [typedStep3Count, setTypedStep3Count] = useState(0);\n  const [typedStep4Count, setTypedStep4Count] = useState(0);\n  \n  // Настройки анимации\n  const CHAR_INTERVAL = 15; // Увеличиваем интервал для более плавной анимации\n  \n  // Управление мгновенным отображением текста для разработки\n  // Установите в true чтобы отключить анимацию при разработке\n  const isInstantText = false;\n\n  // Обработчик завершения печати для шага 1\n  const handleStep1Complete = () => {\n    setTypedStep1Count(prev => {\n      // Проверяем, не превышает ли следующее значение длину массива\n      if (prev < STEP1_ITEMS.length) {\n        return prev + 1;\n      }\n      return prev;\n    });\n  };\n\n  // Сброс счетчиков печати при смене шага\n  useEffect(() => {\n    if (step === 1) setTypedStep1Count(0);\n    if (step === 3) setTypedStep3Count(0);\n  }, [step]);\n\n  // Уведомление родительского компонента об изменении шага\n  useEffect(() => {\n    if (onStepChange) onStepChange(step);\n  }, [step, onStepChange]);\n\n  // Обработка загрузки изображений от пользователя\n  const handleImageUpload = (event, startIndex) => {\n    const files = Array.from(event.target.files);\n    if (files.length === 0) return;\n\n    const newImages = [...images];\n    \n    // Загружаем файлы начиная с выбранной ячейки\n    files.forEach((file, idx) => {\n      const currentIndex = startIndex + idx;\n      // Проверяем, что не выходим за пределы массива\n      if (currentIndex < totalPrompts) {\n        newImages[currentIndex] = URL.createObjectURL(file);\n      }\n    });\n\n    setImages(newImages);\n  };\n\n  // Обработка отправки формы\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setCompleted(true);\n    setTypedStep4Count(0);\n  };\n\n  return (\n    <div className=\"form-container\">\n      {!completed ? (\n        <>\n          {/* Секция отображения текста с эффектом печатной машинки */}\n          <div className={`form-text-view ${step > 1 ? \"dimmed\" : \"\"}`}>\n            <ul className=\"form-text-list\">\n              {STEP1_ITEMS.map((item, idx) => {\n                const isComplete = idx < typedStep1Count;\n                const isTyping = idx === typedStep1Count;\n                \n                return (\n                  <li key={idx} className=\"form-text-list-element\">\n                    {(isComplete || isTyping) && (\n                      <>\n                        <span>{item.prefix}</span>\n                        {isComplete ? (\n                          <p>{item.text}</p>\n                        ) : (\n                          <Typewriter\n                            key={`typewriter-${idx}`}\n                            text={item.text}\n                            charInterval={CHAR_INTERVAL}\n                            onComplete={handleStep1Complete}\n                            isInstant={isInstantText}\n                          />\n                        )}\n                      </>\n                    )}\n                  </li>\n                );\n              })}\n            </ul>\n            {step === 1 && typedStep1Count >= STEP1_ITEMS.length && (\n              <button\n                className=\"form-text-next-button\"\n                onClick={() => setStep(2)}\n              >\n                [Next]\n              </button>\n            )}\n          </div>\n\n          {/* Секция сетки для загрузки изображений */}\n          {step > 1 && (\n            <div className={`form-upload-view ${step === 3 ? \"dimmed\" : \"\"}`}>\n              <div className=\"form-upload-header\">\n                <span>[1]</span>\n                <p>Drag and drop between 13 and 42 images below</p>\n              </div>\n              <div className=\"form-image-grid\">\n                {Array.from({ length: 42 }, (_, i) => (\n                  <div key={i} className=\"form-grid-cell\">\n                    {images[i] ? (\n                      <img loading=\"lazy\" src={images[i]} alt={`Upload ${i + 1}`} />\n                    ) : (\n                      <label>\n                        <input\n                          type=\"file\"\n                          accept=\"image/*\"\n                          multiple\n                          onChange={(e) => handleImageUpload(e, i)}\n                          style={{ display: \"none\" }}\n                        />\n                      </label>\n                    )}\n                  </div>\n                ))}\n              </div>\n              {step === 2 && (\n                <button\n                  className=\"form-upload-button\"\n                  onClick={() => setStep(3)}\n                  disabled={!images.some((img) => img !== null)}\n                >\n                  [UPLOAD]\n                </button>\n              )}\n            </div>\n          )}\n\n          {/* Форма для имени и данных */}\n          {step === 3 && (\n            <div className=\"form-data-view\">\n              <form className=\"form-data-view-form\" onSubmit={handleSubmit}>\n                {STEP3_ITEMS.map((item, idx) => {\n                  const isComplete = idx < typedStep3Count;\n                  const isTyping = idx === typedStep3Count;\n\n                  return (\n                    <div key={idx} className=\"form-data-field\">\n                      {(isComplete || isTyping) && (\n                        <>\n                          {item.prefix && <span>{item.prefix}</span>}\n                          <div className=\"form-data-field-content\">\n                            {isComplete ? (\n                              <p className={item.isItalic ? \"italic\" : \"\"}>{item.text}</p>\n                            ) : isTyping ? (\n                              <Typewriter\n                                text={item.text}\n                                charInterval={CHAR_INTERVAL}\n                                onComplete={() => setTypedStep3Count(prev => prev + 1)}\n                                isInstant={isInstantText}\n                              />\n                            ) : null}\n\n                            {isComplete && (\n                              <>\n                                {item.prefix === \"[2.1]\" && (\n                                  <input type=\"text\" name=\"name\" required />\n                                )}\n                                {item.prefix === \"[2.2]\" && (\n                                  <input type=\"email\" name=\"email\" required />\n                                )}\n                                {item.prefix === \"[2.3]\" && (\n                                  <input type=\"text\" name=\"origin\" />\n                                )}\n                                {item.prefix === \"[2.4]\" && (\n                                  <input\n                                    type=\"text\"\n                                    placeholder=\"Suggest your own prompt\"\n                                    value={customPrompt}\n                                    onChange={(e) => setCustomPrompt(e.target.value)}\n                                    required\n                                  />\n                                )}\n                                {item.prefix === \"[2.5]\" && (\n                                  <div className=\"radio-group\">\n                                    <label>\n                                      <input type=\"radio\" name=\"payment\" value=\"yes\" required /> [YES]\n                                    </label>\n                                    <label>\n                                      <input type=\"radio\" name=\"payment\" value=\"no\" required /> [NO], I participate voluntarily.\n                                    </label>\n                                  </div>\n                                )}\n                                {item.prefix === \"[2.6*]\" && (\n                                  <div className=\"radio-group\">\n                                    <label>\n                                      <input type=\"radio\" name=\"train_ai\" value=\"yes\" required /> [YES]\n                                    </label>\n                                    <label>\n                                      <input type=\"radio\" name=\"train_ai\" value=\"no\" required /> [NO]\n                                    </label>\n                                  </div>\n                                )}\n                                {item.prefix === \"[2.7*]\" && (\n                                  <div className=\"radio-group\">\n                                    <label>\n                                      <input type=\"radio\" name=\"publicly\" value=\"yes\" required /> [YES]\n                                    </label>\n                                    <label>\n                                      <input type=\"radio\" name=\"publicly\" value=\"no\" required /> [NO]\n                                    </label>\n                                  </div>\n                                )}\n                              </>\n                            )}\n                          </div>\n                        </>\n                      )}\n                    </div>\n                  );\n                })}\n\n                {typedStep3Count >= STEP3_ITEMS.length && (\n                  <button type=\"submit\" className=\"form-data-view-submit\">\n                    [COMPLETE]\n                  </button>\n                )}\n              </form>\n            </div>\n          )}\n        </>\n      ) : (\n        <div className=\"form-completed-view\">\n          <div className=\"form-completed-text\">\n            {STEP4_ITEMS.map((item, idx) => {\n              const isComplete = idx < typedStep4Count;\n              const isTyping = idx === typedStep4Count;\n              if (!isComplete && !isTyping) return null;\n              return (\n                <div key={idx} className=\"form-completed-list-element\">\n                  <span>{item.prefix}</span>\n                  {isComplete ? (\n                    <p>{item.text}</p>\n                  ) : (\n                    <Typewriter\n                      text={item.text}\n                      charInterval={CHAR_INTERVAL}\n                      onComplete={() => setTypedStep4Count((c) => c + 1)}\n                      instant={true}\n                    />\n                  )}\n                </div>\n              );\n            })}\n          </div>\n          <button\n            className=\"learn-more-button\"\n            onClick={() => onNavigate(\"text\")}\n          >\n            [learn more]\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Form;\n"],"names":["_ref","text","charInterval","onComplete","isInstant","displayedText","setDisplayedText","useState","isTyping","setIsTyping","timeoutRef","useRef","indexRef","useEffect","current","type","length","slice","setTimeout","clearTimeout","_jsxs","className","children","_jsx","STEP1_ITEMS","prefix","STEP3_ITEMS","isItalic","STEP4_ITEMS","onNavigate","onStepChange","step","setStep","images","setImages","Array","fill","completed","setCompleted","customPrompt","setCustomPrompt","typedStep1Count","setTypedStep1Count","typedStep3Count","setTypedStep3Count","typedStep4Count","setTypedStep4Count","isInstantText","handleStep1Complete","prev","map","item","idx","isComplete","Typewriter","c","instant","onClick","_Fragment","from","_","i","loading","src","alt","accept","multiple","onChange","e","handleImageUpload","event","startIndex","files","target","newImages","forEach","file","currentIndex","URL","createObjectURL","style","display","disabled","some","img","onSubmit","preventDefault","name","required","placeholder","value"],"sourceRoot":""}